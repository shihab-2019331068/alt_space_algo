{
   // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
   // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
   // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
   // same ids are connected.
   // Example:
   // "Print to console": {
   // 	"prefix": "log",
   // 	"body": [
   // 		"console.log('$1');",
   // 		"$2"
   // 	],
   // 	"description": "Log output to console"
   // }
   "Main template": {
      "prefix": "aa",
      "body": [
         "#include<bits/stdc++.h>",
         "",
         "using namespace std;",
         "",
         "#define fastio            ios_base::sync_with_stdio(false); cin.tie(NULL);",
         "#define aa                auto",
         "#define cn                const",
         "#define ll                long long",
         "#define ld                long double",
         "#define fr                first",
         "#define sc                second",
         "#define pll               pair<ll,ll>",
         "#define tll               tuple<ll,ll,ll>",
         "#define vll               vector<ll>",
         "#define bp(x)             __builtin_popcountll(x)",
         "#define all(a)            a.begin(),a.end()",
         "#define arr(a)            a.rbegin(),a.rend()",
         "#define cb(a,i)           (a>>i&1)",
         "#define mp(a,b)           make_pair(a,b)",
         "#define pb(a)             push_back(a)",
         "#define ve                vector",
         "",
         "",
         "#define db(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); cerr<<\"\\n\";}",
         "void err(istream_iterator<string> it) {}",
         "template<typename T, typename... Args>",
         "void err(istream_iterator<string> it, T a, Args... args) {",
         "   cerr << *it << \"=\" << a << \" ! \";",
         "   err(++it, args...);",
         "}",
         "",
         "cn ll N=5e5+7,N1=25,inf=2e18;",
         "cn ld eps=1e-8;",
         "cn ll M=1e9+7;",
         "//cn ll M=998244353;",
         "",
         "int main(){",
         "   $0",
         "}",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
      ],
   },
    "input": {
    	"prefix": "i",
    	"body": [
         "cin>>$0",
    	],
    },
    "Output": {
      "prefix": "o",
      "body": [
         "cout<<$0"
      ],
    },
    "for loop": {
    	"prefix": "f",
    	"body": [
         "for($1=$2; $1<$3; $1++)$4",
    	],
    },
    "string": {
    	"prefix": "g",
    	"body": [
         "string$0",
    	],
    },
    "memset": {
    	"prefix": "mm",
    	"body": [
         "memset($1,$2,sizeof($1));",
    	],
    },
    "next line": {
    	"prefix": "nl",
    	"body": [
         "<<\"\\n\"",
    	],
    },
    "my if": {
    	"prefix": "if",
    	"body": [
         "if($1)",
    	],
    },
    "return": {
    	"prefix": "r",
    	"body": [
         "return$1",
    	],
    },
    "min": {
    	"prefix": "mn",
    	"body": [
         "min($1)",
    	],
    },
    "min_tree": {
    	"prefix": "mtree",
    	"body": [
          "ll rnq(ll l,ll r,ll u=1,ll b=1,ll e=m-1){",
          "   if(r<b or e<l) return inf;",
          "   if(l<=b and e<=r) return T[u];|",
          "   ll m=b+e>>1;",
          "   return min(rnq(l,r,u<<1,b,m),rnq(l,r,u<<1|1,m+1,e));",
          "}",
          "",
          "void upd(ll i,ll v,ll u=1,ll b=1,ll e=m-1){",
          "   if(i<b or e<i) return;",
          "   if(i<=b and e<=i){T[u]+=v; return;}",
          "   ll m=b+e>>1;",
          "   upd(i,v,u<<1,b,m); upd(i,v,u<<1|1,m+1,e);",
          "   T[u]=min(T[u<<1],T[u<<1|1]);",
          "}$1",

    	],
    },
    "sex": {
    	"prefix": "sex",
    	"body": [
         "ll sex(){",
         "   $1",
         "}",
    	],
    },
    "insert": {
    	"prefix": "in",
    	"body": [
         "insert($0)",
    	],
    },
    "max": {
    	"prefix": "mx",
    	"body": [
         "max($1)",
    	],
    }
    


}
